
#ifndef __OSS_EVENT_HANDLER_H
#define __OSS_EVENT_HANDLER_H

#define OSS_EVENT_CONTINUE 0x0001
#define OSS_EVENT_STOP 0x0002


enum oss_event_hook_priorities
{
    OSS_EVENT_PRI_FIRST = (-((int)(~0U>>1))-1),
    OSS_EVENT_PRI_HIGH = -1000,
    OSS_EVENT_PRI_DEFAULT = 0,
    OSS_EVENT_PRI_LOW = 1000,
    OSS_EVENT_PRI_LAST = ((int)(~0U>>1))
};

typedef struct oss_event
{
    DWORD  id;
    INT32 (*handler)(struct oss_event *, void *msg, WORD len);
    struct oss_event *next; /* for the same event hook */
    INT32 priority;
    INT32 iRunCounts;
    VOID *priv;
} OSS_EVENT;


/*
 * event notifier call chain
 */
typedef struct oss_event_list
{
    struct list_head list;
    struct oss_event *head;
} OSS_EVENT_LIST;


#endif



=========================================================================
#include <oss_event_handler.h>

static INT32 _OssEventCallChain(OSS_EVENT **head, VOID *msg, WORD  len)
{
    OSS_EVENT *ev;
    INT32  ret = OSS_EVENT_CONTINUE;

    ev = *head;
    while (ev)
    {
        ev->iRunCounts ++ ;
        ret = ev->handler(ev, msg, len);
        if (ret == OSS_EVENT_STOP)
        {
            break;
        }
        ev = ev->next;
    }
    return ret;
}

static INT32 _OssEventRegister(OSS_EVENT **head, OSS_EVENT *n)
{
    while ((*head) != NULL)
    {
        if (n->priority < (*head)->priority)
        {
            break;
        }
        head = &((*head)->next);
    }
    n->next = *head;
    *head = n;
    return 0;
}

static INT32 _OssEventUnregister(OSS_EVENT **head, OSS_EVENT *n)
{
    while ((*head) != NULL)
    {
        if ((*head) == n)
        {
            *head = n->next;
            return 0;
        }
        head = &((*head)->next);
    }
    return -ENOENT;
}

/*
 * event list handle
 */
INT32 OssEventListRegister(struct list_head *head, OSS_EVENT *ev)
{
    struct list_head *p, *n;
    OSS_EVENT_LIST *el;

    if (!head || !ev || (!ev->handler))
    {
        return -EINVAL;
    }

    list_for_each_safe(p, n, head)
    {
        el = (OSS_EVENT_LIST *)list_entry(p, OSS_EVENT_LIST, list);
        if (el->head->id == ev->id)
        {
            return _OssEventRegister(&el->head, ev);
        }
    }

    /*
     * new event, TODO:zero alloc
     */
    el = GetUB(sizeof(OSS_EVENT_LIST));
    if (!el)
    {
        return -ENOMEM ;
    }
    el->head = ev;
    el->head->next = NULL;

    list_add(&el->list, head);
    return 0;
}

INT32 OssEventListUnregister(struct list_head *head, OSS_EVENT *ev)
{
    struct list_head *p, *n;
    OSS_EVENT_LIST *el;
    INT32 ret;

    if (!head || !ev || (!ev->handler))
    {
        return -EINVAL;
    }

    list_for_each_safe(p, n, head)
    {
        el = (OSS_EVENT_LIST *)list_entry(p, OSS_EVENT_LIST, list);
        if (el->head->id != ev->id)
        {
            continue ;
        }

        ret = _OssEventUnregister(&el->head, ev);
        if (el->head == NULL)
        {
            list_del(&el->list);
            RetUB(el);
        }
        return ret;

    }

    return -EINVAL;
}

INT32 OssEventListCallChain(struct list_head *head, DWORD  id,
                             VOID *msg, WORD len)
{
    struct list_head *p, *n;
    OSS_EVENT_LIST *el;

    list_for_each_safe(p, n, head)
    {
        el = (OSS_EVENT_LIST *)list_entry(p, OSS_EVENT_LIST, list);
        if (el->head->id != id)
        {
            continue ;
        }
        return _OssEventCallChain(&el->head, msg, len);
    }

    UserLogForOss(LOG_LEVEL_WARN," OssEventListCallChain id = 0x%04x!!\n", id);
    return -EINVAL;
}


static INT32 _OssEventShowChain(OSS_EVENT **head)
{
    OSS_EVENT *ev ;

    ev = *head;
    while (ev)
    {
        OssDebugPrintf("evid : 0x%04x  handler : 0x%08x  RCounts : %08d  prior : %d  \n",
                       ev->id,ev->handler, ev->iRunCounts, ev->priority);
        ev  = ev->next;
    }
    return 0 ;
}


INT32 OssEventListShow(struct list_head *head)
{
    struct list_head *p, *n;
    OSS_EVENT_LIST *el;

    list_for_each_safe(p, n, head)
    {
        el = (OSS_EVENT_LIST *)list_entry(p, OSS_EVENT_LIST, list);
        _OssEventShowChain(&el->head);
    }

    return 0 ;
}
